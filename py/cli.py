"""CLI → :class:`py.config.Config`."""

from __future__ import annotations

import argparse
import logging
import pathlib
from typing import List, Optional

from .config import (
    Config,
    DEFAULT_LAYER_WEIGHTS,
)

__all__ = [
    "build_parser",
    "parse_cli",
]

# ── Helper type‑parsers ───────────────────────────────────────────────────

def _positive_int(value: str) -> int:
    """``argparse`` *type* that only accepts positive integers."""
    ivalue = int(value)
    if ivalue < 1:
        raise argparse.ArgumentTypeError("must be a positive integer")
    return ivalue


def _fraction(value: str) -> float:
    """Parse a float that must be within the closed interval [0, 1]."""
    f = float(value)
    if not 0.0 <= f <= 1.0:
        raise argparse.ArgumentTypeError("value must be between 0 and 1")
    return f


def _layer_weight_override(value: str) -> tuple[str, float]:
    """Validate a ``COL=W`` override and return ``(col, weight)``."""
    try:
        col, w = value.split("=", 1)
        return col, float(w)
    except ValueError as exc:
        raise argparse.ArgumentTypeError(f"Bad --layer-weight '{value}': {exc}") from None


# Parser construction

def build_parser() -> argparse.ArgumentParser:
    """Return a fully‑configured :pyclass:`argparse.ArgumentParser`."""
    ap = argparse.ArgumentParser(
        prog="cardinal-profiler",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""\
Cluster, visualise and rank papabile cardinals from a *Cardinal‑Profiler* CSV.

Typical usage::

    python -m py.cli data/cardinals.csv --top 10 --mc 5000
""",
    )

    # Core positional ------------------------------------------------------
    ap.add_argument(
        "csv",
        metavar="CSV",
        type=pathlib.Path,
        help="Profiled CSV generated by Cardinal‑Profiler.",
    )

    # Algorithm & weighting flags -----------------------------------------
    ap.add_argument("--metric", default="cosine", help="Distance metric (default: cosine).")
    ap.add_argument(
        "--layers",
        default="L1_Tags,L2_Tags,L3_Tags,L4_Tags,L5_Tags",
        help="Comma‑separated tag layers to include in the multi‑layer graph "
             "(default: all five layers L1-L5).",
    )

    # Layer weighting preset
    ap.add_argument(
        "--weights",
        choices=["equal", "soft-L5", "custom"],
        default="soft-L5",
        help="Preset for layer weights: equal=all 1.0 | soft-L5=current defaults | custom=use --layer-weight overrides.",
    )

    # Bloc lift parameters
    ap.add_argument("--bloc-layer", default="L5_Tags", help="Which *_Tags column to use for bloc-size lift (default: L5_Tags).")
    ap.add_argument("--bloc-gamma", type=float, default=1.0, metavar="G", help="Exponent γ for bloc lift   (γ=0 disables the lift).")

    # Output directory
    ap.add_argument(
        "--outdir",
        default="outputs",
        type=pathlib.Path,
        help="Destination directory for all generated files (default: ./outputs).",
    )
    ap.add_argument(
        "--layer-weight",
        metavar="COL=W",
        action="append",
        default=[],
        help="Override a layer weight, e.g. --layer-weight L5_Tags=2.0  (may be given multiple times).",
    )
    ap.add_argument(
        "--min-weight",
        type=float,
        default=0.3,
        metavar="W",
        help="Minimum cardinal–faction edge weight (default: 0.3).",
    )
    ap.add_argument(
        "--centrality-mix",
        "-a",
        type=_fraction,
        default=0.7,
        metavar="α",
        help="Blend α for eigenvector vs betweenness (0 ≤ α ≤ 1, default 0.7).",
    )
    ap.add_argument(
        "--rank-by",
        choices=["composite", "centrality"],
        default="composite",
        help="Ranking algorithm (default: composite).",
    )

    # Output controls ------------------------------------------------------
    ap.add_argument("--top", dest="top_n", type=_positive_int, default=15, metavar="N", help="Show the top‑N cardinals (default 15).")
    ap.add_argument("--png-off", dest="no_png", action="store_true", help="Disable PNG outputs.")
    ap.add_argument("--html-off", dest="no_html", action="store_true", help="Disable interactive HTML network.")
    ap.add_argument("--no-show", dest="no_show", action="store_true", help="Suppress matplotlib pop‑ups.")
    ap.add_argument(
        "--no-cheatsheet",
        dest="cheatsheet",
        action="store_false",
        help="Disable PDF cheatsheet generation (enabled by default).",
    )

    # Simulation -----------------------------------------------------------
    ap.add_argument("--mc", default="auto", metavar="N", 
                   help="Monte-Carlo ballots: number or 'auto' (0 = skip, default auto)")
    ap.add_argument("--seed", type=int, default=42, help="RNG seed for --mc (default 42).")

    # Verbosity ------------------------------------------------------------
    verbosity = ap.add_mutually_exclusive_group()
    verbosity.add_argument("-v", dest="loglevel", action="store_const", const=logging.DEBUG, help="Verbose mode (DEBUG).")
    verbosity.add_argument("-q", dest="loglevel", action="store_const", const=logging.WARNING, help="Quiet mode (WARNING).")

    return ap

# Public entry

def parse_cli(argv: Optional[List[str]] = None) -> Config:
    """Parse *argv* and return a populated :class:`Config`."""
    parser = build_parser()
    ns = parser.parse_args(argv)

    # ------------------------------------------------------------------ logging
    logging.basicConfig(
        level=ns.loglevel or logging.INFO,
        format="%(levelname)s  %(message)s",
    )

    # Silence extremely verbose third-party loggers irrespective of -v
    # (we still inherit DEBUG for *our* modules when requested).
    for noisy in (
        "PIL.PngImagePlugin",        # STREAM/IDAT spam
        "PIL.ImageFile",
        "matplotlib.font_manager",   # font-cache chatter
    ):
        logging.getLogger(noisy).setLevel(logging.INFO)

    # preset layer‑weights --------------------------------------------------
    if ns.weights == "equal":
        base_weights = {col: 1.0 for col in DEFAULT_LAYER_WEIGHTS}
    else:  # soft‑L5 or legacy default
        base_weights = DEFAULT_LAYER_WEIGHTS.copy()

    # Handle Monte Carlo ballot value - can be a number or 'auto'
    mc_value = ns.mc
    if mc_value == "auto":
        # Will be resolved later once we know the dataset size
        mc_value = "auto"
    elif mc_value == "0":
        mc_value = 0
    else:
        try:
            mc_value = int(mc_value)
        except ValueError:
            parser.error(f"--mc must be a number or 'auto', got '{mc_value}'")
    
    cfg = Config(
        cheatsheet=ns.cheatsheet,
        csv_path=ns.csv,
        outdir=ns.outdir,
        metric=ns.metric,
        min_weight=ns.min_weight,
        centrality_mix=ns.centrality_mix,
        top_n=ns.top_n,
        no_png=ns.no_png,
        no_html=ns.no_html,
        no_show=ns.no_show,
        rank_by=ns.rank_by,
        mc=mc_value,
        seed=ns.seed,
        layers=[l.strip() for l in ns.layers.split(",") if l.strip()],
        bloc_layer=ns.bloc_layer,
        bloc_gamma=ns.bloc_gamma,
    )

    # Layer‑weight overrides --------------------------------------------------
    for override in ns.layer_weight or []:
        col, weight = _layer_weight_override(override)
        cfg.layer_weights[col] = weight

    # merge preset
    for col, w in base_weights.items():
        cfg.layer_weights.setdefault(col, w)

    # Sanity checks -----------------------------------------------------------
    if cfg.centrality_mix is None or not (0.0 <= cfg.centrality_mix <= 1.0):
        parser.error("--centrality-mix α must be between 0 and 1 (inclusive)")

    if hasattr(cfg, "outdir"):
        pathlib.Path(cfg.outdir).mkdir(parents=True, exist_ok=True)

    # Fill defaults for any missing layer weights ----------------------------
    for col in cfg.layers:
        cfg.layer_weights.setdefault(col, DEFAULT_LAYER_WEIGHTS.get(col, 1.0))

    return cfg


###############################################################################
# Module self‑test                                                            #
###############################################################################
if __name__ == "__main__":  # pragma: no cover – manual smoke‑test
    c = parse_cli()  # uses sys.argv implicitly
    print("Parsed CLI →", c)
